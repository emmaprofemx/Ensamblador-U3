Microsoft (R) Macro Assembler Version 14.29.30147.0	    05/07/23 19:34:02
NombreProgram						     Page 1 - 1


				TITLE NombrePrograma

				;DESCRPICIÓN 
				;Objetivo: Archivo de Ejemplo
				;
				; Autore(s):
				;         Luna Sanchez Juan Pablo.
				;         Ruiz Garcia Emmanuel Alejandro.

				; Semestre: 8vo Semestre ISC 
				;FIN DESCRPICIÓN

				INCLUDE Irvine32.inc  
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C println macro cadena
			      C local cad
			      C .data
			      C 	cad db cadena , 0
			      C 
			      C 	.code
			      C 		push edx 
			      C 		mov edx , offset cad
			      C 		call writestring
			      C 		call crlf
			      C 		pop edx
			      C 
			      C 		ENDM
			      C 
			      C 
			      C 
 00000000			.data
				; Área de Declaración de Variables
 00000000 00000001		masmas dword 1d
 00000004 00000000		opcion dword 0d
 00000008 00000000		resgeneral dword 0d ; RESULTADO GENERAL
 0000000C 0000000C		meses dword 12d
 00000010 00000000		acumulador dword 0d
 00000014 00000001		multiplicador dword 1d
				;-----INCREMENTADORES-------
 00000018 00000001		is dword 1d ; INCREMENTADOR SUMA
 0000001C 00000001		im dword 1d ; INCREMENTADOR MULTIPLICACION
 00000000			.code

 00000000				maincalcu01 PROC
					
						;Lógica del Programa

 00000000					operacion:
						;----LIMPIANDO REGISTROS-----
 00000000  B8 00000000				mov eax , 0;
 00000005  BB 00000000				mov ebx , 0;
 0000000A  B9 00000000				mov ecx , 0;
 0000000F  BA 00000000				mov edx , 0;

						;----------------------------
					;-----------MENU----------------	
					println "PROYECTO CALCULADORA"
 00000020		     1	.data
 00000020 50 52 4F 59 45     1		??0000 db "PROYECTO CALCULADORA" , 0
	   43 54 4F 20 43
	   41 4C 43 55 4C
	   41 44 4F 52 41
	   00
 00000014		     1		.code
 00000014  52		     1			push edx 
 00000015  BA 00000020 R     1			mov edx , offset ??0000
 0000001A  E8 00000000 E     1			call writestring
 0000001F  E8 00000000 E     1			call crlf
 00000024  5A		     1			pop edx
					println "1.-Suma"
 00000035		     1	.data
 00000035 31 2E 2D 53 75     1		??0001 db "1.-Suma" , 0
	   6D 61 00
 00000025		     1		.code
 00000025  52		     1			push edx 
 00000026  BA 00000035 R     1			mov edx , offset ??0001
 0000002B  E8 00000000 E     1			call writestring
 00000030  E8 00000000 E     1			call crlf
 00000035  5A		     1			pop edx
					println "2.-Resta"
 0000003D		     1	.data
 0000003D 32 2E 2D 52 65     1		??0002 db "2.-Resta" , 0
	   73 74 61 00
 00000036		     1		.code
 00000036  52		     1			push edx 
 00000037  BA 0000003D R     1			mov edx , offset ??0002
 0000003C  E8 00000000 E     1			call writestring
 00000041  E8 00000000 E     1			call crlf
 00000046  5A		     1			pop edx
					println "3.-Multipliacion"
 00000046		     1	.data
 00000046 33 2E 2D 4D 75     1		??0003 db "3.-Multipliacion" , 0
	   6C 74 69 70 6C
	   69 61 63 69 6F
	   6E 00
 00000047		     1		.code
 00000047  52		     1			push edx 
 00000048  BA 00000046 R     1			mov edx , offset ??0003
 0000004D  E8 00000000 E     1			call writestring
 00000052  E8 00000000 E     1			call crlf
 00000057  5A		     1			pop edx
					println "4.-Division"
 00000057		     1	.data
 00000057 34 2E 2D 44 69     1		??0004 db "4.-Division" , 0
	   76 69 73 69 6F
	   6E 00
 00000058		     1		.code
 00000058  52		     1			push edx 
 00000059  BA 00000057 R     1			mov edx , offset ??0004
 0000005E  E8 00000000 E     1			call writestring
 00000063  E8 00000000 E     1			call crlf
 00000068  5A		     1			pop edx
					println "SELECCIONA UNA DE LAS SIGUIENTES OPERACIONES"
 00000063		     1	.data
 00000063 53 45 4C 45 43     1		??0005 db "SELECCIONA UNA DE LAS SIGUIENTES OPERACIONES" , 0
	   43 49 4F 4E 41
	   20 55 4E 41 20
	   44 45 20 4C 41
	   53 20 53 49 47
	   55 49 45 4E 54
	   45 53 20 4F 50
	   45 52 41 43 49
	   4F 4E 45 53 00
 00000069		     1		.code
 00000069  52		     1			push edx 
 0000006A  BA 00000063 R     1			mov edx , offset ??0005
 0000006F  E8 00000000 E     1			call writestring
 00000074  E8 00000000 E     1			call crlf
 00000079  5A		     1			pop edx
					;-------------------------------

					;-----------LEYENDO OPCION----------------
 0000007A  E8 00000000 E		call readint ; leemos la opcion eax
 0000007F  A3 00000004 R		mov opcion , eax
					;-----------------------------------------
					
					;************OPCIONES*******************
 00000084  83 3D 00000004 R		cmp opcion , 1
	   01
 0000008B  74 27			je suma

 0000008D  83 3D 00000004 R		cmp opcion , 2
	   02
 00000094  0F 84 0000008C		je resta

 0000009A  83 3D 00000004 R		cmp opcion , 3
	   03
 000000A1  0F 84 00000101		je multiplicacion

 000000A7  83 3D 00000004 R		cmp opcion , 4
	   04
 000000AE  0F 84 00000153		je division
					;***************************************

					;****************E T I Q U E T A S******************
 000000B4				suma:
					println "Estas en la parte de suma"
 00000090		     1	.data
 00000090 45 73 74 61 73     1		??0006 db "Estas en la parte de suma" , 0
	   20 65 6E 20 6C
	   61 20 70 61 72
	   74 65 20 64 65
	   20 73 75 6D 61
	   00
 000000B4		     1		.code
 000000B4  52		     1			push edx 
 000000B5  BA 00000090 R     1			mov edx , offset ??0006
 000000BA  E8 00000000 E     1			call writestring
 000000BF  E8 00000000 E     1			call crlf
 000000C4  5A		     1			pop edx
 000000C5  C7 05 00000018 R	    mov is, 1 ; inicializamos el contador en 1
	   00000001
 000000CF			    ciclo:
				        println "Ingresa un numero: (ingresa 't' para terminar)"
 000000AA		     1	.data
 000000AA 49 6E 67 72 65     1		??0007 db "Ingresa un numero: (ingresa 't' para terminar)" , 0
	   73 61 20 75 6E
	   20 6E 75 6D 65
	   72 6F 3A 20 28
	   69 6E 67 72 65
	   73 61 20 27 74
	   27 20 70 61 72
	   61 20 74 65 72
	   6D 69 6E 61 72
	   29 00
 000000CF		     1		.code
 000000CF  52		     1			push edx 
 000000D0  BA 000000AA R     1			mov edx , offset ??0007
 000000D5  E8 00000000 E     1			call writestring
 000000DA  E8 00000000 E     1			call crlf
 000000DF  5A		     1			pop edx
 000000E0  E8 00000000 E	        call readchar ; leemos un caracter
 000000E5  3C 74		        cmp al, 't' ; comparamos si el caracter es 't'
 000000E7  0F 84 0000019E	        je salir ; si es 't', saltamos a salir
 000000ED  E8 00000000 E	        call readint ; leemos el entero
 000000F2  01 05 00000010 R	        add acumulador, eax ; lo sumamos al acumulador
 000000F8  83 05 00000018 R	        add is, 1 ; incrementamos el contador
	   01
 000000FF  A1 00000010 R	        mov eax, acumulador
						println "Resultado hasta el momento:"
 000000D9		     1	.data
 000000D9 52 65 73 75 6C     1		??0008 db "Resultado hasta el momento:" , 0
	   74 61 64 6F 20
	   68 61 73 74 61
	   20 65 6C 20 6D
	   6F 6D 65 6E 74
	   6F 3A 00
 00000104		     1		.code
 00000104  52		     1			push edx 
 00000105  BA 000000D9 R     1			mov edx , offset ??0008
 0000010A  E8 00000000 E     1			call writestring
 0000010F  E8 00000000 E     1			call crlf
 00000114  5A		     1			pop edx
 00000115  E8 00000000 E	        call writedec ; imprimimos el acumulador
 0000011A  E8 00000000 E	        call crlf ; saltamos de línea
 0000011F  EB AE		        jmp ciclo ; volvemos a pedir otro número
 00000121  E9 00000165			jmp salir

 00000126				resta:
					println "Estas en la parte de resta"
 000000F5		     1	.data
 000000F5 45 73 74 61 73     1		??0009 db "Estas en la parte de resta" , 0
	   20 65 6E 20 6C
	   61 20 70 61 72
	   74 65 20 64 65
	   20 72 65 73 74
	   61 00
 00000126		     1		.code
 00000126  52		     1			push edx 
 00000127  BA 000000F5 R     1			mov edx , offset ??0009
 0000012C  E8 00000000 E     1			call writestring
 00000131  E8 00000000 E     1			call crlf
 00000136  5A		     1			pop edx
 00000137  C7 05 00000018 R	    mov is, 1 ; inicializamos el contador en 1
	   00000001
 00000141			    cicloresta:
				        println "Ingresa un numero: (ingresa 't' para terminar)"
 00000110		     1	.data
 00000110 49 6E 67 72 65     1		??000A db "Ingresa un numero: (ingresa 't' para terminar)" , 0
	   73 61 20 75 6E
	   20 6E 75 6D 65
	   72 6F 3A 20 28
	   69 6E 67 72 65
	   73 61 20 27 74
	   27 20 70 61 72
	   61 20 74 65 72
	   6D 69 6E 61 72
	   29 00
 00000141		     1		.code
 00000141  52		     1			push edx 
 00000142  BA 00000110 R     1			mov edx , offset ??000A
 00000147  E8 00000000 E     1			call writestring
 0000014C  E8 00000000 E     1			call crlf
 00000151  5A		     1			pop edx
 00000152  E8 00000000 E	        call readchar ; leemos un caracter
 00000157  3C 74		        cmp al, 't' ; comparamos si el caracter es 't'
 00000159  0F 84 0000012C	        je salir ; si es 't', saltamos a salir
 0000015F  E8 00000000 E	        call readint ; leemos el entero
 00000164  83 3D 00000018 R	        cmp is, 1 ; comparamos si es el primer número
	   01
 0000016B  74 28		        je primeronumero ; si es el primer número, saltamos a la etiqueta "primeronumero"
 0000016D  29 05 00000010 R	        sub acumulador, eax ; restamos el número ingresado al acumulador
 00000173  A1 00000010 R	        mov eax, acumulador
						println "Resultado hasta el momento:"
 0000013F		     1	.data
 0000013F 52 65 73 75 6C     1		??000B db "Resultado hasta el momento:" , 0
	   74 61 64 6F 20
	   68 61 73 74 61
	   20 65 6C 20 6D
	   6F 6D 65 6E 74
	   6F 3A 00
 00000178		     1		.code
 00000178  52		     1			push edx 
 00000179  BA 0000013F R     1			mov edx , offset ??000B
 0000017E  E8 00000000 E     1			call writestring
 00000183  E8 00000000 E     1			call crlf
 00000188  5A		     1			pop edx
 00000189  E8 00000000 E	        call writedec ; imprimimos el acumulador
 0000018E  E8 00000000 E	        call crlf ; saltamos de línea
 00000193  EB AC		        jmp cicloresta ; volvemos a pedir otro número
 00000195			    primeronumero:
 00000195  A3 00000010 R	        mov acumulador, eax ; asignamos el primer número al acumulador
 0000019A  83 05 00000018 R	        add is, 1 ; incrementamos el contador
	   01
 000001A1  EB 9E		        jmp cicloresta ; volvemos a pedir otro número
 000001A3  E9 000000E3			jmp salir


 000001A8				multiplicacion:
				    println "Estas en la parte de multiplicacion"
 0000015B		     1	.data
 0000015B 45 73 74 61 73     1		??000C db "Estas en la parte de multiplicacion" , 0
	   20 65 6E 20 6C
	   61 20 70 61 72
	   74 65 20 64 65
	   20 6D 75 6C 74
	   69 70 6C 69 63
	   61 63 69 6F 6E
	   00
 000001A8		     1		.code
 000001A8  52		     1			push edx 
 000001A9  BA 0000015B R     1			mov edx , offset ??000C
 000001AE  E8 00000000 E     1			call writestring
 000001B3  E8 00000000 E     1			call crlf
 000001B8  5A		     1			pop edx
 000001B9  C7 05 00000010 R	    mov acumulador, 1 ; inicializamos el acumulador en 1
	   00000001
 000001C3			    ciclomulti:
				         println "Ingresa un numero: (ingresa 't' para terminar)"
 0000017F		     1	.data
 0000017F 49 6E 67 72 65     1		??000D db "Ingresa un numero: (ingresa 't' para terminar)" , 0
	   73 61 20 75 6E
	   20 6E 75 6D 65
	   72 6F 3A 20 28
	   69 6E 67 72 65
	   73 61 20 27 74
	   27 20 70 61 72
	   61 20 74 65 72
	   6D 69 6E 61 72
	   29 00
 000001C3		     1		.code
 000001C3  52		     1			push edx 
 000001C4  BA 0000017F R     1			mov edx , offset ??000D
 000001C9  E8 00000000 E     1			call writestring
 000001CE  E8 00000000 E     1			call crlf
 000001D3  5A		     1			pop edx
 000001D4  E8 00000000 E	        call readchar ; leemos un caracter
 000001D9  3C 74		        cmp al, 't' ; comparamos si el caracter es 't'
 000001DB  0F 84 000000AA	        je salir ; si es 't', saltamos a salir

 000001E1  E8 00000000 E	        call readint ; leemos el entero
 000001E6  F7 25 00000014 R	        mul multiplicador ; multiplicamos el valor anterior con el valor actual
 000001EC  A3 00000014 R	        mov multiplicador, eax ; actualizamos el valor anterior con el resultado
 000001F1  A1 00000014 R	        mov eax, multiplicador ; guardamos el resultado en eax para imprimirlo
 000001F6  E8 00000000 E	        call writedec ; imprimimos el resultado
 000001FB  E8 00000000 E	        call crlf ; saltamos de línea
 00000200  EB C1		        jmp ciclomulti ; volvemos a pedir otro número
 00000202  E9 00000084		    jmp salir

 00000207				division:
				    println "Estas en la parte de division"
 000001AE		     1	.data
 000001AE 45 73 74 61 73     1		??000E db "Estas en la parte de division" , 0
	   20 65 6E 20 6C
	   61 20 70 61 72
	   74 65 20 64 65
	   20 64 69 76 69
	   73 69 6F 6E 00
 00000207		     1		.code
 00000207  52		     1			push edx 
 00000208  BA 000001AE R     1			mov edx , offset ??000E
 0000020D  E8 00000000 E     1			call writestring
 00000212  E8 00000000 E     1			call crlf
 00000217  5A		     1			pop edx
				    println "Ingresa el dividendo:"
 000001CC		     1	.data
 000001CC 49 6E 67 72 65     1		??000F db "Ingresa el dividendo:" , 0
	   73 61 20 65 6C
	   20 64 69 76 69
	   64 65 6E 64 6F
	   3A 00
 00000218		     1		.code
 00000218  52		     1			push edx 
 00000219  BA 000001CC R     1			mov edx , offset ??000F
 0000021E  E8 00000000 E     1			call writestring
 00000223  E8 00000000 E     1			call crlf
 00000228  5A		     1			pop edx
 00000229  E8 00000000 E	    call readint ; leemos el dividendo
 0000022E  8B D8		    mov ebx, eax ; guardamos el dividendo en ebx
 00000230  B8 00000000		    mov eax, 0 ; limpiamos eax
				    println "Ingresa el divisor:"
 000001E2		     1	.data
 000001E2 49 6E 67 72 65     1		??0010 db "Ingresa el divisor:" , 0
	   73 61 20 65 6C
	   20 64 69 76 69
	   73 6F 72 3A 00
 00000235		     1		.code
 00000235  52		     1			push edx 
 00000236  BA 000001E2 R     1			mov edx , offset ??0010
 0000023B  E8 00000000 E     1			call writestring
 00000240  E8 00000000 E     1			call crlf
 00000245  5A		     1			pop edx
 00000246  E8 00000000 E	    call readint ; leemos el divisor
 0000024B  83 F8 00		    cmp eax, 0 ; comprobamos si el divisor es cero
 0000024E  74 28		    je division_error ; si es cero, saltamos a la etiqueta "division_error"
 00000250  8B C8		    mov ecx, eax ; guardamos el divisor en ecx
 00000252  8B C3		    mov eax, ebx ; movemos el dividendo a eax
 00000254  BA 00000000		    mov edx, 0 ; limpiamos edx
 00000259  F7 F1		    div ecx ; dividimos eax entre ecx
				    println "El resultado de la division es:"
 000001F6		     1	.data
 000001F6 45 6C 20 72 65     1		??0011 db "El resultado de la division es:" , 0
	   73 75 6C 74 61
	   64 6F 20 64 65
	   20 6C 61 20 64
	   69 76 69 73 69
	   6F 6E 20 65 73
	   3A 00
 0000025B		     1		.code
 0000025B  52		     1			push edx 
 0000025C  BA 000001F6 R     1			mov edx , offset ??0011
 00000261  E8 00000000 E     1			call writestring
 00000266  E8 00000000 E     1			call crlf
 0000026B  5A		     1			pop edx
 0000026C  E8 00000000 E	    call writedec ; imprimimos el resultado
 00000271  E8 00000000 E	    call crlf ; saltamos de línea
 00000276  EB 13		    jmp salir ; saltamos a la etiqueta "salir"

 00000278			division_error:
				    println "Error: division entre cero"
 00000216		     1	.data
 00000216 45 72 72 6F 72     1		??0012 db "Error: division entre cero" , 0
	   3A 20 64 69 76
	   69 73 69 6F 6E
	   20 65 6E 74 72
	   65 20 63 65 72
	   6F 00
 00000278		     1		.code
 00000278  52		     1			push edx 
 00000279  BA 00000216 R     1			mov edx , offset ??0012
 0000027E  E8 00000000 E     1			call writestring
 00000283  E8 00000000 E     1			call crlf
 00000288  5A		     1			pop edx
 00000289  EB 00		    jmp salir ; saltamos a la etiqueta "salir"

					

					;**************SALIDA******************
					;-----------DESEA CONTINUAR?----------------
 0000028B				salir:
					; Preguntar si el usuario desea continuar
						println "Desea continuar? (S/N)"
 00000231		     1	.data
 00000231 44 65 73 65 61     1		??0013 db "Desea continuar? (S/N)" , 0
	   20 63 6F 6E 74
	   69 6E 75 61 72
	   3F 20 28 53 2F
	   4E 29 00
 0000028B		     1		.code
 0000028B  52		     1			push edx 
 0000028C  BA 00000231 R     1			mov edx , offset ??0013
 00000291  E8 00000000 E     1			call writestring
 00000296  E8 00000000 E     1			call crlf
 0000029B  5A		     1			pop edx
 0000029C  E8 00000000 E			call readchar ; leemos la respuesta del usuario
 000002A1  3C 53				cmp al , 'S' ; SI INGRESO LA S , VOLVEMOS AL MENU PRINCIPAL
 000002A3  0F 84 FFFFFD57			je operacion ; Si el usuario desea continuar, saltamos a la etiqueta "operacion"
 000002A9  3C 73				cmp al , 's' ; SI INGRESO LA S , VOLVEMOS AL MENU PRINCIPAL
 000002AB  0F 84 FFFFFD4F			je operacion ; Si el usuario desea continuar, saltamos a la etiqueta "operacion"
					exit
 000002B8				maincalcu01 ENDP
					END maincalcu01
Microsoft (R) Macro Assembler Version 14.29.30147.0	    05/07/23 19:34:02
NombreProgram						     Symbols 2 - 1




Macros:

                N a m e                 Type

println  . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000248 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002B8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
maincalcu01  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002B8 Public STDCALL
  operacion  . . . . . . . . . .	L Near	 00000000 _TEXT	
  suma . . . . . . . . . . . . .	L Near	 000000B4 _TEXT	
  ciclo  . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  resta  . . . . . . . . . . . .	L Near	 00000126 _TEXT	
  cicloresta . . . . . . . . . .	L Near	 00000141 _TEXT	
  primeronumero  . . . . . . . .	L Near	 00000195 _TEXT	
  multiplicacion . . . . . . . .	L Near	 000001A8 _TEXT	
  ciclomulti . . . . . . . . . .	L Near	 000001C3 _TEXT	
  division . . . . . . . . . . .	L Near	 00000207 _TEXT	
  division_error . . . . . . . .	L Near	 00000278 _TEXT	
  salir  . . . . . . . . . . . .	L Near	 0000028B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000020 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000035 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000046 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000057 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000063 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00000090 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000000AA _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000000D9 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000000F5 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000110 _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000013F _DATA	
??000C . . . . . . . . . . . . .	Byte	 0000015B _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000017F _DATA	
??000E . . . . . . . . . . . . .	Byte	 000001AE _DATA	
??000F . . . . . . . . . . . . .	Byte	 000001CC _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000001E2 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 000001F6 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00000216 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000231 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
acumulador . . . . . . . . . . .	DWord	 00000010 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
im . . . . . . . . . . . . . . .	DWord	 0000001C _DATA	
is . . . . . . . . . . . . . . .	DWord	 00000018 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
masmas . . . . . . . . . . . . .	DWord	 00000000 _DATA	
meses  . . . . . . . . . . . . .	DWord	 0000000C _DATA	
multiplicador  . . . . . . . . .	DWord	 00000014 _DATA	
opcion . . . . . . . . . . . . .	DWord	 00000004 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resgeneral . . . . . . . . . . .	DWord	 00000008 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
